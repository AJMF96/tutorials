= Generate your Java application with devon4j
====
devon4j is the Java stack of devonfw. It allows you to build business applications (backends) using Java technology in a highly efficient and standardized way based on established best-practices.

## Prerequisites
* User should have Java development experience

## Learning goals
After completing this scenario, you will have learned how to generate Java application using devon4j.

More information about devon4j on https://devonfw.com/website/pages/docs/devon4j.asciidoc.html

====
====
### Install devonfw-ide
To create devon4j application it is necessary to have devonfw-ide installed on your machine.For this tutorial purpose we will have it installed here.

If you want to try it on local machine you can refer [here](https://devonfw.com/website/pages/docs/devonfw-ide-introduction.asciidoc.html#setup.asciidoc).

[step]
--
restoreDevonfwIde (["java","mvn","vscode"])
--
Before proceeding to next steps make sure ide is installed.
====
====
### Create devon4j sample application

If you want to create devon4j application on your local machine there are two ways to do it:
* In eclipse as shown [here](https://devonfw.com/website/pages/docs/devon4j.asciidoc_tutorials.html#tutorial-newapp.asciidoc_from-eclipse)
* Using command line as shown [here](https://devonfw.com/website/pages/docs/devon4j.asciidoc_tutorials.html#tutorial-newapp.asciidoc_from-command-line)

Once devonfw-ide is installed , we will create sample devon4j application with name *sampleapp*. Next steps will guide you on how to do it.

[step]
--
createDevon4jProject("sampleapp")
--

Once sampleapp is created switch to next tab of IDE. In IDE explorer you can see folder structure like devonfw-> workspaces->main->sampleapp . 

sampleapp contains 3 modules i.e api, core and server.

**api**: It contains API for sampleapp.The API contains the required artifacts to interact with your application via remote services. This can be REST service interfaces, transfer-objects with their interfaces and datatypes but also OpenAPI or gRPC contracts.

**core**: It is the core of the application.In this module you can write actual business logic with service implementation, as well as entire logic layer and dataaccess layer.

**batch**: optional module for batch layer. In this example we have not created it. To add batch module while generating from commandline use -Dbatch=batch parameter. And to generate it from eclipse using mave archetype enter batch variable value as batch in project creation page.

**server**: This module bundles the entire app (core with optional batch) typically as a bootified WAR file.

If you want to know more about modules and project structure refer [here](https://github.com/devonfw/devon4j/blob/master/documentation/guide-structure.asciidoc#project-structure).
====
