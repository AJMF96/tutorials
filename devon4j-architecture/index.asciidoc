= devon4j architecture in practice
====

This tutorial aims to explain concepts and principles of devon4j architecture with help of an example.
After completeing this tutorial you will be aware of devon4j structure and architecture. 

====
====
### Install devonfw-ide

To create devon4j application it is necessary to have devonfw-ide installed on your machine.For this tutorial purpose we will have it installed here.

If you want to try it on local machine you can refer [here](https://devonfw.com/website/pages/docs/devonfw-ide-introduction.asciidoc.html#setup.asciidoc).

[step]
--
restoreDevonfwIde (["java","mvn","vscode"])
--
Before proceeding to next steps make sure ide is installed.
====
====
### Create devon4j sample application

If you want to create devon4j application on your local machine there are two ways to do it:
* In eclipse as shown [here](https://devonfw.com/website/pages/docs/devon4j.asciidoc_tutorials.html#tutorial-newapp.asciidoc_from-eclipse)
* Using command line as shown [here](https://devonfw.com/website/pages/docs/devon4j.asciidoc_tutorials.html#tutorial-newapp.asciidoc_from-command-line)

Once devonfw-ide is installed , we will create sample devon4j application with name *sampleapp*. Next steps will guide you on how to do it.

[step]
--
createDevon4jProject("sampleapp")
--

Once project is created switch to next tab of IDE. In IDE explorer you can see folder structure like devonfw-> workspaces->main->sampleapp . In sampleapp modules such as api,core and server will get created.

====
====

[step]
--
nextKatacodaStep("devon4j application architecture", [{ "image": "images/devon4j_proj_structure1.jpg" }])
--

As shown above, sampleapp contains 3 modules i.e api, core and server.
More details can be found [here](https://github.com/devonfw/devon4j/blob/master/documentation/guide-structure.asciidoc#project-structure).

we can see different layers such as service layer, logic layer,dataaccess layer. More details can be found [here](https://github.com/devonfw/devon4j/blob/master/documentation/architecture.asciidoc#technical-architecture).

====

[step]
--
nextKatacodaStep("Understand devon4j application architecture", [{ "file": "devon4j-app-arch.md" }])
--