= devon4j architecture in practice
====
== Prerequisites

Java programming knowledge

== Learning goals

This tutorial aims to explain concepts and principles of devon4j architecture with help of an example.
* Create devon4j sample application
* Understand devon4j application structure 
* Understand Key and architectural principles followed by devon4j
* Understand devon4j application architecture

By end of this tutorial you will have detailed understanding of principles followed by devon4j application as well as its structure and architecture. 

====
====
### Install devonfw-ide

To create devon4j application it is necessary to have devonfw-ide installed on your machine.For this tutorial purpose we will have it installed here.

If you want to try it on local machine you can refer [here](https://devonfw.com/website/pages/docs/devonfw-ide-introduction.asciidoc.html#setup.asciidoc).

[step]
--
restoreDevonfwIde (["java","mvn","vscode"])
--
Before proceeding to next steps make sure ide is installed.
====
====
### Create devon4j sample application

If you want to create devon4j application on your local machine there are two ways to do it:
* In eclipse as shown [here](https://devonfw.com/website/pages/docs/devon4j.asciidoc_tutorials.html#tutorial-newapp.asciidoc_from-eclipse)
* Using command line as shown [here](https://devonfw.com/website/pages/docs/devon4j.asciidoc_tutorials.html#tutorial-newapp.asciidoc_from-command-line)

Once devonfw-ide is installed , we will create sample devon4j application with name *sampleapp*. Next steps will guide you on how to do it.

[step]
--
createDevon4jProject("sampleapp")
--

Once project is created switch to next tab of IDE. In IDE explorer you can see folder structure like devonfw-> workspaces->main->sampleapp . In sampleapp modules such as api,core and server will get created.

====
====

[step]
--
nextKatacodaStep("devon4j application architecture", [{ "image": "images/devon4j_proj_structure1.jpg" }])
--

As shown above, sampleapp contains 3 modules i.e api, core and server.

**api**: It contains API for sampleapp.The API contains the required artifacts to interact with your application via remote services. This can be REST service interfaces, transfer-objects with their interfaces and datatypes but also OpenAPI or gRPC contracts.

**core**: It is the core of the application.In this module you can write actual business logic with service implementation, as well as entire logic layer and dataaccess layer.

**batch**: optional module for batch layer. In this example we have not created it.

**server**: This module bundles the entire app (core with optional batch) typically as a bootified WAR file.

If you want to know more about modules and project structure refer [here](https://github.com/devonfw/devon4j/blob/master/documentation/guide-structure.asciidoc#project-structure).

devon4j application follows [multilayered architecture](https://en.wikipedia.org/wiki/Multitier_architecture).

Each component is divided into following layers:
* [client layer](https://github.com/devonfw/devon4j/blob/master/documentation/guide-client-layer.asciidoc) for the front-end (GUI).

* [service layer](https://github.com/devonfw/devon4j/blob/master/documentation/guide-service-layer.asciidoc) for the services used to expose functionality of the back-end to the client or other consumers.

* [batch layer](https://github.com/devonfw/devon4j/blob/master/documentation/guide-batch-layer.asciidoc) for exposing functionality in batch-processes (e.g. mass imports).

* [logic layer](https://github.com/devonfw/devon4j/blob/master/documentation/guide-logic-layer.asciidoc) for the business logic.

* [data-access layer](https://github.com/devonfw/devon4j/blob/master/documentation/guide-dataaccess-layer.asciidoc) for the data access (esp. persistence).

====

[step]
--
nextKatacodaStep("Understand devon4j application architecture", [{ "file": "devon4j-app-arch.md" }])
--