= Understand the concept of lazyloading in Angular with devon4ng
== Learn how to defer initialization of modules in Angular until it is needed
====
In single-page-applications as the application size increases its loading speed decreases (since typically the entire application is loaded at once). Lazy loading is a dessign pattern that defers initialization of objects until it is needed. Angular handles lazy loading through the routing module which redirects to requested pages. Those pages can be loaded at start or on demand. In this tutorial we will build a simple app to understand how lazyloading is implemented in Angular.

## Prerequisites
* devonfw-ide installed
* Basic Angular knowledge

## Learning goals
In this tutorial we will learn how to:
* create an Angular application using the devon command
* add Angular Material to the application
* import Angular Material components into our modules
* use Material icons in the application
* use a prebulit theme to style the application
* create layout (conataining a header with menu along with a sidenav with navigational links) with the Angular Material components
====

[step]
--
restoreDevonfwIde(["java","mvn", "npm", "ng"])
--

[step]
--
nextKatacodaStep("Introduction", [{ "file": "files/intro.txt" }, { "image": "images/levels-app.png" }])
--

Before creating a devon4ng application, you first have to install the devonfw ide. You will find more information about devonfw on https://devonfw.com/website/pages/welcome/welcome.html.+
Once you have setup devonfw ide, you are ready to create your devon4ng application.
[step]
--
createDevon4ngProject("level-app", "", ["--style=scss", "--routing=true", "--strict=false"])
--

In the file app.component.html delete all the content and put in the `router-outlet` tag.
[step]
--
changeFile("level-app/src/app/app.component.html", { "file": "files/app.component.html.txt" })
--

Next we will create the feature modules and components for the app. We will follow the structure shown in the image in the first step. You can use the CLI command `devon ng generate module` along with the `--routing` flag to generate the modules, and `devon ng generate component` command to generate the components.
[step]
--
createFile("level-app/src/app/first/first-routing.module.ts", "files/first-routing.module.ts.txt")
createFile("level-app/src/app/first/first.module.ts", "files/first.module.ts.txt")
createFile("level-app/src/app/first/second-left/second-left-routing.module.ts", "files/second-left-routing.module.ts.txt")
createFile("level-app/src/app/first/second-left/second-left.module.ts", "files/second-left.module.ts.txt")
createFile("level-app/src/app/first/second-right/second-right-routing.module.ts", "files/second-right-routing.module.ts.txt")
createFile("level-app/src/app/first/second-right/second-right.module.ts", "files/second-right.module.ts.txt")
createFile("level-app/src/app/first/first/first.component.html", "files/first.component.html.txt")
createFile("level-app/src/app/first/first/first.component.scss", "files/empty-file.txt")
createFile("level-app/src/app/first/first/first.component.ts", "files/first.component.ts.txt")
createFile("level-app/src/app/first/second-left/content/content.component.html", "files/content.component.html.txt")
createFile("level-app/src/app/first/second-left/content/content.component.scss", "files/empty-file.txt")
createFile("level-app/src/app/first/second-left/content/content.component.ts", "files/content.component.ts.txt")
createFile("level-app/src/app/first/second-right/content/content.component.html", "files/content-right.component.html.txt")
createFile("level-app/src/app/first/second-right/content/content.component.scss", "files/empty-file.txt")
createFile("level-app/src/app/first/second-right/content/content.component.ts", "files/content.component.ts.txt")
--

To move between the components we will now configure the routes. You can refer the image in the first step to understand how we will configure the routes.+
In `app-routing.module.ts` we will add a path 'first' to `FirstComponent` and a redirection from '' to 'first'. And then import the `FirstModule` in the main `app.module.ts`+
Next, for the feature modules, we will add the routes 'first/second-left' and 'first/second-right' pointing to their respective `ContentComponent` in `first-routing.module.ts`. And then import `SecondLeftModule` and `SecondRightModule` in `first.module.ts`
[step]
--
changeFile("level-app/src/app/app-routing.module.ts", { "file": "files/app-routing.module.ts.txt" })
changeFile("level-app/src/app/app.module.ts", { "file": "files/app.module.ts.txt" })
changeFile("level-app/src/app/first/first-routing.module.ts", { "file": "files/first-routing.module.update1.ts.txt" })
changeFile("level-app/src/app/first/first.module.ts", { "file": "files/first.module.ts.update1.ts.txt" })
runClientNg("level-app", { "startupTime": 200, "port": 4200, "path": "" })
--